
タスクの見積もり方

　・全体像を把握する。　or 目的が何なのか
　・何を持って完了とするか。不明瞭なら必ず確認する
　・事前条件の確認

　・タスクの分解
　　controllerを作る
例）　　RestControllerにする
　　　　Serviceに実装があるのでそれを呼び出す
　　　　Converterで変換するので、こいつは呼び出すだけ
　　　　Getで取得する。URLはstudentListにする
　　Service作る
　　Repository 作る
　　Converter作る
　　データオブジェクト作る
　　画面作る
　　テスト作成、テスト実施
　→１時間単位に分割する。１時間で終わるくらいの粒度に分割する

　・タスク分解ができないのであれば、それはタスクの理解が低い
　→理解をするための調査タスクをタスクとして入れる必要がある
　→見積もりをするための見積もりタスクが発生することはよくある

　・理解度が浅い状態で見積もりは出しておく・そのうえで調査して、新しい見積もりを作る
　→見積もりを実践して、見積もりが変わって……というのを繰り返していく

　・見積もりと実践、予定と実績は必ず残しておく
　→見積もりから比較的大きな乖離があった場合は反省する（早く終わろうと遅く終わろうと）

　・時間はきちんと図っておく
　→Trello（ツール）　　タスクボード
　→スマホとか時間計測アプリ。タスク管理ツール

要約↓
タスクの見積もり方まとめ

タスク見積もりを行う際は、まず全体像を把握し、作業の目的と完了条件を明確にすることが前提となる。
完了の基準が不明確な場合は、関係者への確認を行い、認識をそろえておく必要がある。

次に、タスクを細分化する。
例として「Controllerを作成する」という作業を分解すると、
「RestControllerに設定する」
「Serviceの処理を呼び出す」
「Converterでデータを変換する」
「URLを /studentList に設定する」
といった具体的な単位に分けることができる。おおよそ1時間以内に完了できる粒度まで分割するのが望ましい。

タスクの分解が困難な場合は、作業内容の理解が不足している可能性が高く、「調査タスク」を追加して知識を補う必要がある。
見積もりを行うための調査作業自体を、独立したタスクとして扱うことも一般的である。

初期段階での見積もりはあくまで暫定的なものであり、実際の作業を通じて再見積もりを行うことが想定される。
見積もり値と実績値の差異を記録・分析し、乖離が大きい場合は原因を検証して次回以降に反映させる。

作業時間の管理には、Trelloなどのタスク管理ツールやスマートフォンの時間計測アプリを利用する方法が有効である。
見積もりと実績を比較し、作業精度を継続的に向上させることが、開発プロセス全体の改善につながる。